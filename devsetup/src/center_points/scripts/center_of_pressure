#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from typing import Union
import rospy
import numpy as np
import tf2_ros, tf2_geometry_msgs
from geometry_msgs.msg import (
    WrenchStamped,
    PointStamped,
    TransformStamped,
    Vector3, Vector3Stamped)

from center_points.utils import PointCommunicator, Point_to_numpy, numpy_to_Point, Vector3_to_numpy, numpy_to_Vector3, Vector3Stamped_to_PointStamped, urdf_link_map # type: ignore

def rel_sensor_position(buffer : tf2_ros.Buffer, sensor_side : str) -> Union[Vector3, None]:
    """
        left_ankle_ft => leg_left_6_link
        right_ankle_ft => leg_right_6_link
    """
    sensor_link_name = 'leg_'+sensor_side+'_6_link'
    sole_link_name = sensor_side+'_sole_link'
    check = buffer.can_transform(sole_link_name, sensor_link_name, rospy.Time())
    if not check:
        return None
    transform : TransformStamped = buffer.lookup_transform(sole_link_name, sensor_link_name, rospy.Time())
    return transform.transform.translation

def calc_cop(buffer : tf2_ros.Buffer,
             left_wrench : WrenchStamped,
             sensor_side : str) -> Union[Vector3Stamped, None]:
    f = left_wrench.wrench.force
    t = left_wrench.wrench.torque

    if f.z < 100.0:
        return None

    p = rel_sensor_position(buffer, sensor_side)

    # transform error
    if p is None:
        return None

    # calculate cop for each foot
    px = (-t.y-p.z*f.x+p.x*f.z) / f.z
    py = (-t.x-p.z*f.y+p.y*f.z) / f.z
    cop = Vector3Stamped()
    cop.header.frame_id = sensor_side+'_sole_link'
    cop.header.stamp = rospy.Time()
    cop.vector = numpy_to_Vector3(np.array([px,py,0]))
    return cop

def main():
    rospy.init_node('center_of_pressure', anonymous=False)
    buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(buffer)
    cop_com_total = PointCommunicator('center_of_pressure_total', 'odom')
    cop_com_left = PointCommunicator('center_of_pressure_left', 'left_sole_link')
    cop_com_right = PointCommunicator('center_of_pressure_right', 'right_sole_link')
    while not rospy.is_shutdown():
        left_wrench = rospy.wait_for_message('/left_ankle_ft', WrenchStamped)
        right_wrench = rospy.wait_for_message('/right_ankle_ft', WrenchStamped)
        if left_wrench is None or right_wrench is None:
            continue

        cop_l = calc_cop(buffer, left_wrench, 'left')
        cop_r = calc_cop(buffer, right_wrench, 'right')
        
        try:
            if not cop_l is None:
                cop_l_np = Vector3_to_numpy(cop_l.vector)
                cop_com_left.publish_point(cop_l_np)
            if not cop_r is None:
                cop_r_np = Vector3_to_numpy(cop_r.vector)
                cop_com_right.publish_point(cop_r_np)
        except rospy.ROSInterruptException:
            pass
        
        # combine cop from both feet
        if cop_r is None or cop_l is None:
            continue
        
        exists_l = buffer.can_transform('odom', cop_l.header.frame_id, cop_l.header.stamp)
        exists_r = buffer.can_transform('odom', cop_r.header.frame_id, cop_r.header.stamp)
        if not exists_l or not exists_r:
            continue
        cop_l_base : PointStamped = buffer.transform(Vector3Stamped_to_PointStamped(cop_l), 'odom')
        cop_r_base : PointStamped = buffer.transform(Vector3Stamped_to_PointStamped(cop_r), 'odom')

        flz = left_wrench.wrench.force.z
        frz = right_wrench.wrench.force.z

        px = (cop_r_base.point.x*frz+cop_l_base.point.x*flz) / (frz+flz)
        py = (cop_r_base.point.y*frz+cop_l_base.point.y*flz) / (frz+flz)

        cop = np.array([px,py,0])
        try: 
            if not cop_r is None or not cop_l is None:
                cop_com_total.publish_point(cop)
        except rospy.ROSInterruptException:
            pass

if __name__ == '__main__':
    main()
